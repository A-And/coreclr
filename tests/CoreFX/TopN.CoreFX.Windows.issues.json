[
    {
        "name": "Canonicalization.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Common.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Common.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Tests.StringTests.IndexOfAny_NullAnyOf_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.StringTests.CompareOrdinal_NegativeLength_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.StringTests.IndexOfAny_InvalidStartIndex_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "CoreFx.Private.TestUtilities.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Invariant.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.CSharp.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.VisualBasic.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "Microsoft.VisualBasic.CompilerServices.Tests.UtilsTests.CopyArray_NonMatchingBounds_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "Microsoft.Win32.Primitives.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.Win32.Registry.AccessControl.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.Win32.Registry.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "Microsoft.Win32.RegistryTests.Registry_GetValue_str_str_obj.NullKeyName_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.Registry_GetValue_str_str_obj.InvalidKeyName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_CreateSubKey_str.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_CreateSubKey_str_rkpc.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_b.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rkpc.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rkpc_rr.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "Microsoft.Win32.RegistryTests.RegistryKey_OpenSubKey_str_rr.NegativeTests",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "Microsoft.Win32.SystemEvents.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "Microsoft.XmlSerializer.Generator.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.AppContext.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Buffers.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.CodeDom.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.CodeDom.Compiler.Tests.CodeCompilerTests.CompileAssemblyFromFileBatch_EmptyFileNameInFileNames_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.CodeDom.Compiler.Tests.CodeCompilerTests.CompileAssemblyFromFile_EmptyFileName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.CodeDom.Compiler.Tests.CodeCompilerTests.FromFile_EmptyFileName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Collections.Concurrent.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Collections.Concurrent.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Collections.Concurrent.Tests.ConcurrentDictionaryTests.TestAddNullValue_IDictionary_ReferenceType_null",
                    "reason": "System.ArgumentException System.ArgumentException : The value was of an incorrect type for this dictionary."
                },
                {
                    "name": "System.Collections.Concurrent.Tests.ConcurrentDictionaryTests.TestAddNullValue_IDictionary_ValueType_null_add",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentException)\\r\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                }
            ]
        }
    },
    {
        "name": "System.Collections.Immutable.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Collections.Immutable.Tests.ImmutableArrayTest.CreateRangeSliceWithSelector",
                    "reason": "System.IndexOutOfRangeException System.IndexOutOfRangeException : Index was outside the bounds of the array."
                },
                {
                    "name": "System.Collections.Immutable.Tests.ImmutableArrayTest.CreateRangeWithSelector",
                    "reason": "System.IndexOutOfRangeException System.IndexOutOfRangeException : Index was outside the bounds of the array."
                },
                {
                    "name": "System.Collections.Immutable.Tests.ImmutableArrayTest.CreateRangeWithSelectorAndArgument",
                    "reason": "System.IndexOutOfRangeException System.IndexOutOfRangeException : Index was outside the bounds of the array."
                },
                {
                    "name": "System.Collections.Immutable.Tests.ImmutableArrayTest.CreateRangeSliceWithSelectorAndArgument",
                    "reason": "System.IndexOutOfRangeException System.IndexOutOfRangeException : Index was outside the bounds of the array."
                }
            ]
        }
    },
    {
        "name": "System.Collections.NonGeneric.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Collections.NonGeneric.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Collections.Tests.HashtableTests.Ctor_Int_Invalid",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.HashtableTests.Ctor_Int_IEqualityComparer_Invalid",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.HashtableTests.Ctor_Int_Int_Invalid",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.HashtableTests.Ctor_Capacity_LoadFactor_IEqualityComparer_Invalid",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Collections.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Collections.Specialized.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Collections.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Collections.Tests.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.SortedSet_TreeSubset_String_Tests.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.SortedSet_TreeSubset_Int_Tests.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Collections.Tests.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.ComponentModel.Annotations.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.TableAttributeTests.Ctor_String_NullOrWhitespaceName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.TableAttributeTests.Schema_Set_NullOrWhitespaceValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.ForeignKeyAttributeTests.Ctor_String_NullOrWhitespaceName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.InversePropertyAttributeTests.Ctor_String_NullOrWhitespaceProperty_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.ColumnAttributeTests.Ctor_String_NullOrWhitespaceName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.ComponentModel.DataAnnotations.Schema.Tests.ColumnAttributeTests.TypeName_Set_NullOrWhitespaceValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.ComponentModel.Composition.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ComponentModel.EventBasedAsync.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ComponentModel.Primitives.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ComponentModel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ComponentModel.TypeConverter.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ComponentModel.TypeConverter.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.ComponentModel.ToolboxItemAttributeTests.Ctor_NullToolboxItemTypeName_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                },
                {
                    "name": "System.ComponentModel.Tests.EditorAttributeTests.Ctor_NullEditorTypeName_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                },
                {
                    "name": "System.ComponentModel.Tests.DesignerAttributeTests.Ctor_NullDesignerTypeName_ThrowsArgumentNullExceptionException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                },
                {
                    "name": "System.ComponentModel.Tests.EnumConverterTests.ConvertTo_WithContext_Negative",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Timers.Tests.TimersDescriptionAttributeTests.Description_GetWithNullDescription_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Composition.AttributeModel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Composition.Convention.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Composition.Hosting.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Composition.Runtime.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Composition.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Composition.TypedParts.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Configuration.ConfigurationManager.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Console.Manual.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Console.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Console.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "WindowAndCursorProps.WindowLeftTop_Windows",
                    "reason": "Assert.Throws() Failure\r\nExpected: typeof(System.IO.IOException)\r\nActual:   (No exception was thrown)"
                },
                {
                    "name": "WindowAndCursorProps.WindowWidth_WindowHeight_InvalidSize",
                    "reason": "Assert.Throws() Failure\r\nExpected: typeof(System.IO.IOException)\r\nActual:   typeof(System.ArgumentOutOfRangeException): Positive number required.\r\nParameter name: width\r\nActual value was 0."
                },
                {
                    "name": "WindowAndCursorProps.SetWindowPosition_GetWindowPosition_ReturnsExpected",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: top\\r\\nActual:   left\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "WindowAndCursorProps.GetCursorPosition",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 2886\\r\\nActual:   2887"
                }
            ]
        }
    },
    {
        "name": "System.Data.Common.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.DataSetExtensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Data.Tests.DataRowComparerTests.Equals_NullStringValueInStringArray_CanBeCompared",
                    "reason": "System.NullReferenceException : Object reference not set to an instance of an object."
                }
            ]
        }
    },
    {
        "name": "System.Data.Odbc.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.Contracts.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.Debug.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.DiagnosticSource.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.EventLog.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.FileVersionInfo.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.PerformanceCounter.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.Process.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.Process.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.StackTrace.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.TextWriterTraceListener.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.Tools.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Diagnostics.TraceSource.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Diagnostics.TraceSourceTests.TraceSourceClassTests.ConstrutorExceptionTest",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Diagnostics.TraceSourceTests.TraceSourceClassTests.EmptySourceName",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Diagnostics.Tracing.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.DirectoryServices.AccountManagement.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.DirectoryServices.AccountManagement.Tests.ComputerPrincipalTest.Ctor_EmptySamAccountName_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.DirectoryServices.Protocols.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.DirectoryServices.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Drawing.Common.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Drawing.Drawing2D.Tests.PathGradientBrushTests.Transform_Null_ArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Imaging.Tests.MetafileTests.Static_GetMetafileHeader_InvalidPath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Imaging.Tests.MetafileTests.Ctor_InvalidPath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Imaging.Tests.MetafileTests.Ctor_InvalidPathI_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.IconTests.ExtractAssociatedIcon_InvalidFilePath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.ImageTests.FromFile_EmptyFileName_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Drawing2D.Tests.HatchBrushTests.Ctor_InvalidHatchStyle_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.BufferedGraphicsContextTests.MaximumBuffer_SetInvalidHeight_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.BufferedGraphicsContextTests.MaximumBuffer_SetInvalidWidth_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Drawing2D.Tests.LinearGradientBrushTests.Transform_SetNull_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.InterpolationMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'InterpolationMode'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.CompositingQuality_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'CompositingQuality'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.PixelOffsetMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'PixelOffsetMode'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.PageUnit_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'GraphicsUnit'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.SmoothingMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'SmoothingMode'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.CompositingMode_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'CompositingMode'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.GraphicsTests.TextRenderingHint_SetInvalid_ThrowsInvalidEnumArgumentException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ComponentModel.InvalidEnumArgumentException)\\r\\nActual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'TextRenderingHint'.\\r\\nParameter name: value"
                },
                {
                    "name": "System.Drawing.Tests.BitmapTests.Ctor_NullGraphics_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Drawing.Tests.BitmapTests.Ctor_InvalidFilePath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Drawing.Primitives.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Dynamic.Runtime.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Globalization.Calendars.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Globalization.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Globalization.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Globalization.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Globalization.Tests.RegionInfoMethodTests.Ctor_EmptyName_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.IO.Compression.Brotli.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Compression.Brotli.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Compression.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Compression.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Compression.GzipStreamUnitTests.ConcatenatedGzipStreams",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: Stream 2\\r\\nActual:   (null)"
                },
                {
                    "name": "System.IO.Compression.GzipStreamUnitTests.ManyConcatenatedGzipStreams",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 1000\\r\\nActual:   1"
                }
            ]
        }
    },
    {
        "name": "System.IO.Compression.ZipFile.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.FileSystem.AccessControl.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.FileSystem.DriveInfo.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests.Ctor_InvalidPath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.IO.FileSystem.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.FileSystem.Primitives.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.FileSystem.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Tests.Enumeration.RemovedDirectoryTests.RemoveDirectoryBeforeHandleCreationAndReplaceWithFile",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.RemovedDirectoryTests.RemoveDirectoryBeforeHandleCreation",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestCountFiles",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestGetFilesWithExtensions",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestCountFileBytes",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.GetFileNamesEnumerable",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.FileStream_SetLength.SetLengthUnseekableThrows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.FileStream_Seek.SeekUnseekableThrows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.FileStream_Seek.InvalidSeekOriginThrows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.FileStream_Seek.SeekDisposedThrows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.DirectoryInfo_CreateSubDirectory.ValidPathWithoutTrailingSlash",
                    "reason": "System.ArgumentException System.ArgumentException : The directory specified, 'oq3eklx3.oeu', is not a subdirectory of 'C:\\\\Users\\\\anandono\\\\AppData\\\\Local\\\\Temp\\\\DirectoryInfo_CreateSubDirectory_vv4tbdki.2q5\\\\ValidPathWithoutTrailingSlash_142_98959e38\\\\'.\\r\\nParameter name: path"
                },
                {
                    "name": "System.IO.Tests.DirectoryInfo_CreateSubDirectory.ValidPathWithTrailingSlash",
                    "reason": "System.ArgumentException System.ArgumentException : The directory specified, '3tw22dam.r5w\\\\', is not a subdirectory of 'C:\\\\Users\\\\anandono\\\\AppData\\\\Local\\\\Temp\\\\DirectoryInfo_CreateSubDirectory_xiv2oluq.bps\\\\ValidPathWithTrailingSlash_121_6652a2bc\\\\'.\\r\\nParameter name: path"
                },
                {
                    "name": "System.IO.Tests.Enumeration.TrimmedPaths.TrimmedPathsText_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.TrimmedPaths.TrimmedPathsCopyTo_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.TrimmedPaths.TrimmedPathsOpen_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.TrimmedPaths.TrimmedPathsMoveTo_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.TrimmedPaths.TrimmedPathsReplace_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                }
            ]
        }
    },
    {
        "name": "System.IO.FileSystem.Watcher.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.IsolatedStorage.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.IsolatedStorage.GetCreationTimeTests.GetCreationTime_RaisesArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.IsolatedStorage.GetLastAccessTimeTests.GetLastAccessTime_RaisesArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.IsolatedStorage.GetLastWriteTimeTests.GetLastWriteTime_RaisesArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.IO.MemoryMappedFiles.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.MemoryMappedFiles.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.MemoryMappedFiles.Tests.MemoryMappedFileTests_CreateFromFile.InvalidArguments_Mode_Truncate",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.MemoryMappedFiles.Tests.MemoryMappedFileTests_CreateFromFile.InvalidArguments_Mode",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.IO.Packaging.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Pipelines.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Pipes.AccessControl.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Pipes.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Pipes.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Ports.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.IO.UnmanagedMemoryStream.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Tests.Uma_ReadWriteStructArray.UmaReadWriteGenericStringStructArray_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.Uma_ReadWriteStructArray.UmaReadWriteStructArrayWithReferenceType_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Json.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Linq.Expressions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Linq.Expressions.Tests.GetDelegateTypeTests.CantBeFunc",
                    "reason": "System.TypeLoadException System.TypeLoadException : The generic type 'System.Func`1' was used with an invalid instantiation in assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'."
                },
                {
                    "name": "System.Linq.Expressions.Tests.GetDelegateTypeTests.CantBeAction",
                    "reason": "System.TypeLoadException System.TypeLoadException : The generic type 'System.Action`1' was used with an invalid instantiation in assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'."
                }
            ]
        }
    },
    {
        "name": "System.Linq.Parallel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Linq.Parallel.Tests.GroupJoinTests.GroupJoin_CustomComparator_LeftWithOrderingColisions",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 1 out of 1 items in the collection did not pass.\\r\\n[0]: Item: [0, System.Linq.Parallel.ListChunk`1[System.Int32]]\\r\\n     Xunit.Sdk.AllException: Assert.All() Failure: 3 out of 4 items in the collection did not pass.\\r\\n     [3]: Item: 4\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 12\\r\\n          Actual:   4\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass23_2.<GroupJoin_CustomComparator_LeftWithOrderingColisions>b__5(Int32 y) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 407\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [2]: Item: 12\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 8\\r\\n          Actual:   12\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass23_2.<GroupJoin_CustomComparator_LeftWithOrderingColisions>b__5(Int32 y) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 407\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [1]: Item: 8\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 4\\r\\n          Actual:   8\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass23_2.<GroupJoin_CustomComparator_LeftWithOrderingColisions>b__5(Int32 y) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 407\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 45\\r\\n        at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass23_0.<GroupJoin_CustomComparator_LeftWithOrderingColisions>b__4(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 414\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.GroupJoinTests.GroupJoin_Multiple_LeftWithOrderingColisions",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 1 out of 1 items in the collection did not pass.\\r\\n[0]: Item: [0, System.Linq.Parallel.ListChunk`1[System.Int32]]\\r\\n     Xunit.Sdk.AllException: Assert.All() Failure: 2 out of 2 items in the collection did not pass.\\r\\n     [1]: Item: 0\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 1\\r\\n          Actual:   0\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [0]: Item: 1\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 0\\r\\n          Actual:   1\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 45\\r\\n        at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass17_0.<GroupJoin_Multiple_LeftWithOrderingColisions>b__4(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 261\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.GroupJoinTests.GroupJoin_CustomComparator",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 1 out of 1 items in the collection did not pass.\\r\\n[0]: Item: [0, System.Linq.Parallel.ListChunk`1[System.Int32]]\\r\\n     Xunit.Sdk.AllException: Assert.All() Failure: 2 out of 4 items in the collection did not pass.\\r\\n     [2]: Item: 0\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 8\\r\\n          Actual:   0\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [0]: Item: 8\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 0\\r\\n          Actual:   8\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 45\\r\\n        at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass21_0.<GroupJoin_CustomComparator>b__3(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 335\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.GroupJoinTests.GroupJoin_Multiple",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 1 out of 1 items in the collection did not pass.\\r\\n[0]: Item: [0, System.Linq.Parallel.ListChunk`1[System.Int32]]\\r\\n     Xunit.Sdk.AllException: Assert.All() Failure: 8 out of 8 items in the collection did not pass.\\r\\n     [7]: Item: 0\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 7\\r\\n          Actual:   0\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [6]: Item: 7\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 6\\r\\n          Actual:   7\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [5]: Item: 6\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 5\\r\\n          Actual:   6\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [4]: Item: 5\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 4\\r\\n          Actual:   5\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [3]: Item: 4\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 3\\r\\n          Actual:   4\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [2]: Item: 3\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 2\\r\\n          Actual:   3\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [1]: Item: 2\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 1\\r\\n          Actual:   2\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n     [0]: Item: 1\\r\\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n          Expected: 0\\r\\n          Actual:   1\\r\\n             at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n             at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 45\\r\\n        at System.Linq.Parallel.Tests.GroupJoinTests.<>c__DisplayClass15_0.<GroupJoin_Multiple>b__3(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\GroupJoinTests.cs:line 219\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_Multiple",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 2 out of 2 items in the collection did not pass.\\r\\n[1]: Item: [0, 0]\\r\\n     Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 1\\r\\n     Actual:   0\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.<>c__DisplayClass15_0.<Join_Multiple>b__3(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 177\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[0]: Item: [0, 1]\\r\\n     Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 0\\r\\n     Actual:   1\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.<>c__DisplayClass15_0.<Join_Multiple>b__3(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 177\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_CustomComparator_LeftWithOrderingColisions_UnorderedRight",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 3 out of 8 items in the collection did not pass.\\r\\n[4]: Item: [6, 6]\\r\\n     System.Exception: Key: 6, Value: 6 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 2\\r\\n     Actual:   1\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 533\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[3]: Item: [0, 0]\\r\\n     System.Exception: Key: 0, Value: 0 ---> Xunit.Sdk.TrueException: Key already seen! 0\\r\\n     Expected: True\\r\\n     Actual:   False\\r\\n        at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\BooleanAsserts.cs:line 95\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 531\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[1]: Item: [2, 2]\\r\\n     System.Exception: Key: 2, Value: 2 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 2\\r\\n     Actual:   1\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 533\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_CustomComparator",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 1 out of 2 items in the collection did not pass.\\r\\n[0]: Item: [0, 8]\\r\\n     Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 0\\r\\n     Actual:   8\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.<>c__DisplayClass25_0.<Join_CustomComparator>b__3(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 321\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_Multiple_LeftWithOrderingColisions_UnorderedRight",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 3 out of 8 items in the collection did not pass.\\r\\n[4]: Item: [6, 6]\\r\\n     System.Exception: Key: 6, Value: 6 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 2\\r\\n     Actual:   1\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 533\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[3]: Item: [0, 0]\\r\\n     System.Exception: Key: 0, Value: 0 ---> Xunit.Sdk.TrueException: Key already seen! 0\\r\\n     Expected: True\\r\\n     Actual:   False\\r\\n        at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\BooleanAsserts.cs:line 95\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 531\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[1]: Item: [2, 2]\\r\\n     System.Exception: Key: 2, Value: 2 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 2\\r\\n     Actual:   1\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 533\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_CustomComparator_LeftWithOrderingColisions",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 2 out of 3 items in the collection did not pass.\\r\\n[1]: Item: [0, 0]\\r\\n     System.Exception: Key: 0, Value: 0 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 8\\r\\n     Actual:   0\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 543\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[0]: Item: [0, 8]\\r\\n     System.Exception: Key: 0, Value: 8 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 0\\r\\n     Actual:   8\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 543\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                },
                {
                    "name": "System.Linq.Parallel.Tests.JoinTests.Join_Multiple_LeftWithOrderingColisions",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 2 out of 3 items in the collection did not pass.\\r\\n[1]: Item: [0, 0]\\r\\n     System.Exception: Key: 0, Value: 0 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 8\\r\\n     Actual:   0\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 543\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\\r\\n[0]: Item: [0, 8]\\r\\n     System.Exception: Key: 0, Value: 8 ---> Xunit.Sdk.EqualException: Assert.Equal() Failure\\r\\n     Expected: 0\\r\\n     Actual:   8\\r\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\EqualityAsserts.cs:line 40\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 543\\r\\n        --- End of inner exception stack trace ---\\r\\n        at System.Linq.Parallel.Tests.JoinTests.LeftOrderingCollisionTest.<>c__DisplayClass4_0.<Validate>b__0(KeyValuePair`2 p) in C:\\\\Users\\\\anandono\\\\source\\\\repos\\\\corefx\\\\src\\\\System.Linq.Parallel\\\\tests\\\\QueryOperators\\\\JoinTests.cs:line 547\\r\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36"
                }
            ]
        }
    },
    {
        "name": "System.Linq.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Linq.Queryable.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Linq.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Management.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Memory.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Memory.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Tests.StringTests.CompareOrdinal_NegativeLength_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.StringTests.IndexOfAny_InvalidStartIndex_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.StringTests.IndexOfAny_NullAnyOf_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Net.Http.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.GetAsync_ExpectContinueTrue_NoContent_StillSendsHeader",
                    "reason": "System.Net.Http.HttpRequestException System.Net.Http.HttpRequestException : Response status code does not indicate success: 100 (Continue)."
                },
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble.CustomMethod_SentUppercasedIfKnown",
                    "reason": "Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\r\\nExpected: GET \\r\\nActual:   get ..."
                },
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.CustomMethod_SentUppercasedIfKnown_Additional",
                    "reason": "Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\r\\nExpected: DELETE \\r\\nActual:   delete ..."
                },
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.CustomMethod_SentUppercasedIfKnown",
                    "reason": "Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\r\\nExpected: GET \\r\\nActual:   get ..."
                }
            ]
        }
    },
    {
        "name": "System.Net.Http.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Http.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Http.WinHttpHandler.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Http.WinHttpHandler.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.HttpListener.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Tests.HttpListenerAuthenticationTests.ExtendedProtectionSelectorDelegate_SetNull_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Net.Tests.HttpListenerAuthenticationTests.ExtendedProtectionPolicy_SetCustomChannelBinding_ThrowsObjectDisposedException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Net.Mail.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Mail.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.NameResolution.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.NameResolution.Pal.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.NameResolution.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.NetworkInformation.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Ping.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Primitives.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Primitives.Functional.Tests.CookieCollectionTest.Remove_NonExistantCookie_ReturnsFalse",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                },
                {
                    "name": "System.Net.Primitives.Functional.Tests.CookieCollectionTest.Contains_Success",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                },
                {
                    "name": "System.Net.Primitives.Functional.Tests.CookieCollectionTest.Remove_Success",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                },
                {
                    "name": "System.Net.Primitives.Functional.Tests.CookieCollectionTest.Clear_Success",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                }
            ]
        }
    },
    {
        "name": "System.Net.Primitives.Pal.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Primitives.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Primitives.UnitTests.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Requests.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Tests.RequestStreamTest.BeginWriteAsync_CountIsNegative_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Net.Tests.RequestStreamTest.BeginWriteAsync_OffsetPlusCountExceedsBufferLength_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Net.Tests.HttpWebRequestTest.Host_SetInvalidUri_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Net.Tests.HttpWebRequestTest.Host_SetNullValue_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Net.Tests.HttpWebRequestTest.Host_SetSlash_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Net.Security.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Security.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.ServicePoint.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Sockets.Async.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Sockets.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.Sockets.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.WebClient.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.WebHeaderCollection.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.WebProxy.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.WebSockets.Client.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Net.WebSockets.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.WebSockets.Tests.WebSocketTests.ReceiveAsync_ServerSplitHeader_ValidDataReceived",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 84\\r\\nActual:   0"
                }
            ]
        }
    },
    {
        "name": "System.Net.WebSockets.WebSocketProtocol.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.WebSockets.Tests.WebSocketProtocolCreateTests.ReceiveAsync_ServerSplitHeader_ValidDataReceived",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 84\\r\\nActual:   0"
                }
            ]
        }
    },
    {
        "name": "System.Numerics.Vectors.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Numerics.Vectors.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ObjectModel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Private.Uri.ExtendedFunctional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Private.Uri.Functional.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.PrivateUri.Tests.UriBuilderTests.InvalidScheme_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.PrivateUri.Tests.UriBuilderTests.Ctor_InvalidExtraValue_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Private.Uri.Unit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Context.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NullObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NotEmptyParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NullParameters_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_EmptyParameters_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_WrongObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_HasSetter_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_NullPropertyName_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ReflectedTypeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.AttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.CanReadTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_NullPropertyType_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ToStringTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetAccessorsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetConstantValueTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetHashCodeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetOptionalCustomModifiersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetRawConstantValueTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetValue_NoGetter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_NoSetter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_WrongPropertyType_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_HasSetterWithIndex_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetRequiredCustomModifiersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetValue_HasGetter_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.CanWriteTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.MetadataTokenTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_GetterAndSetterNull_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_EmptyPropertyName_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetIndexParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetTypesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.ProjectAssemblyTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetTypeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetCustomAttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetExportedTypesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetManifestResourceInfoTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.EntryPoint",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetModulesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetHashCodeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.EqualsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetSatelliteAssemblyTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.ManifestModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetLoadedModulesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.MakeGenericMethodTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_WrongObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetGenericMethodDefinitionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NotSingleParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsGenericMethodDefinitionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetMethodImplementationFlagsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetBaseDefinition",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.MethodHandleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NullParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ReturnTypeCustomAttributes",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_ValidArguments_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.CallingConventionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsGenericMethodTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NullObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ReturnParameterTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetGenericArgumentsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ContainsGenericParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomPropertyInfoTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_ParameterAttributes_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_MemberAttributes_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_Null_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapAssembly_Null_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.Ctor_Null_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.PlatformNotSupportedException): Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_Interface_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                }
            ]
        }
    },
    {
        "name": "System.Reflection.CoreCLR.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.DispatchProxy.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Emit.ILGeneration.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Emit.Lightweight.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Emit.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Metadata.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.TypeExtensions.CoreCLR.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Reflection.TypeExtensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Resources.Reader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Resources.ResourceManager.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Resources.Writer.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Caching.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.CompilerServices.Unsafe.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.CompilerServices.VisualC.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Extensions.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Tests.EnvironmentTests.CurrentDirectory_Empty_Path_Throws_ArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Reflection.Tests.AssemblyNameProxyTests.GetAssemblyName_AssemblyNameProxy",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.BitConverterTests.ValueArgumentNull",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.BitConverterTests.StartIndexPlusNeededLengthTooLong",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.PathTests.GetFullPath_InvalidArgs",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.IO.Tests.PathTests_Join.JoinTwoPaths",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.PathTests_Join.JoinThreePaths",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String, System.String)'."
                }
            ]
        }
    },
    {
        "name": "System.Runtime.Handles.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.InteropServices.RuntimeInformation.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.InteropServices.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.InteropServices.WindowsRuntime.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Loader.DefaultContext.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Loader.RefEmitLoadContext.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Loader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Numerics.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Numerics.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Formatters.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Json.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Json.ReflectionOnly.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Json.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Xml.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Xml.ReflectionOnly.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Serialization.Xml.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Runtime.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Reflection.Tests.AssemblyNameTests.GetAssemblyName",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Reflection.Tests.AssemblyTests.LoadFile_NoSuchPath_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Reflection.Tests.AssemblyTests.LoadFrom_EmptyAssemblyFile_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.GuidTests.Ctor_Int_Short_Short_ByteArray_InvalidLengthByteArray_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.GuidTests.CompareTo_ValueNotGuid_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.GuidTests.CtorSpan_InvalidLengthByteArray_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.GuidTests.Ctor_InvalidLengthByteArray_ThrowsArgumentException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Text.Tests.StringBuilderTests.Append_Char_NoSpareCapacity_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Tests.DecimalTests.GetHashCode",
                    "reason": "Xunit.Sdk.XunitException Decimal 3 has multiple hash codes: 1074266112 (3) and -1074266097 (3.000000000000000000000000000)"
                },
                {
                    "name": "System.Runtime.CompilerServices.Tests.CallerArgumentExpressionAttributeTests.ArgumentToCallerArgumentExpressionSetsParameterNameProperty",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Runtime.CompilerServices.CallerArgumentExpressionAttribute' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Tests.ArrayTests.Copy",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: Object[,] [1, 2, 3, 4, 5, ...]\\r\\nActual:   Object[,] [1, 2, 3, 4, 5, ...]"
                },
                {
                    "name": "System.Tests.StringTests.IndexOfAny_NullAnyOf_ThrowsArgumentNullException",
                    "reason": "System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'"
                },
                {
                    "name": "System.Tests.StringTests.CompareOrdinal_NegativeLength_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'"
                },
                {
                    "name": "System.Tests.StringTests.IndexOfAny_InvalidStartIndex_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'"
                }
            ]
        }
    },
    {
        "name": "System.Security.AccessControl.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Claims.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.Algorithms.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.DeriveBytesTests.Rfc2898Tests.Ctor_DiminishedSalt",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Security.Cryptography.DeriveBytesTests.Rfc2898Tests.Ctor_GenerateZeroSalt",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Security.Cryptography.DeriveBytesTests.Rfc2898Tests.Ctor_EmptySalt",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Security.Cryptography.DeriveBytesTests.Rfc2898Tests.Ctor_GenerateDiminishedSalt",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Security.Cryptography.Cng.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.Csp.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Csp.Tests.CspParametersTests.SetFlags_ValidatesInput",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Security.Cryptography.Encoding.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.Pkcs.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.ProcessResponse_Symantec_NoCerts_WithNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NegativeNonceIsMadePositive",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildFromSignerInfo",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromHashAndName",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NonceLeadingZerosIgnored",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NoncePaddingZerosIgnored",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildFromNullSignerInfo",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.TryDecode_WithExtensions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromHashAndOid",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.ProcessResponse_FreeTsa_WithCerts_NoNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildWithAllOptions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.EmptyNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.EnsureExtraCertsAdded",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignCmsUsingECDsaCertWithNotMatchingKeyThrows",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\r\\nActual:   (No exception was thrown)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.CheckSignedEncrypted_IssuerSerial_FromNetFx",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unable to set field EncapContentInfo on type System.Security.Cryptography.Pkcs.Asn1.SignedDataAsn.\\r\\n---- System.Security.Cryptography.CryptographicException : Unable to set field Content on type System.Security.Cryptography.Pkcs.Asn1.EncapsulatedContentInfoAsn.\\r\\n-------- System.Security.Cryptography.CryptographicException : ASN1 corrupted data."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.AddFirstSigner_DSA",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.CounterSignCmsUsingExplicitDSAKeyForFirstSignerAndECDsaForCounterSignature",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.CounterSignCmsUsingExplicitRSAKeyForFirstSignerAndDSAForCounterSignature",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignEnveloped",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\nExpected: 2\\r\\nActual:   0"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignIdentifiedContent_BadOid",
                    "reason": "System.ArgumentNullException System.ArgumentNullException : Value cannot be null.\\r\\nParameter name: oidValue"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignCmsUsingExplicitDSAKey",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignerInfoCollection_Indexer_MinusOne",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentOutOfRangeException)\\r\\nActual:   typeof(System.IndexOutOfRangeException): Index was outside the bounds of the array."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedEmptyOctetStringWithIndefiniteLength",
                    "reason": "Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unexpected cryptographic message encoding."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedDataWithNonPkcs7Oid",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 3003010203\\r\\nActual:   010203\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedOctetStringWithExtraData",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 300102\\r\\nActual:   02\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedEmptyArray",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 3000\\r\\nActual:   \\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedOctetStringWithDefiniteLength",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 3003010203\\r\\nActual:   010203\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedOctetStringWithIndefiniteLength",
                    "reason": "Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unexpected cryptographic message encoding."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedEmptyOctetString",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 3000\\r\\nActual:   \\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingExplicitPrivateKey.DecryptEnvelopedOctetStringWithInefficientlyEncodedLength",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: 3003010203\\r\\nActual:   010203\\r\\n          ↑ (pos 0)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_AddRemoveUnsignedAttributes_JoinCounterSignaturesAttributesIntoOne",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_AddUnsignedAttribute_Adds",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.EnsureExtraCertsAdded",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.AddCounterSigner_DSA",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_RemoveUnsignedAttributes_MultipleAttributeValues",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.RemoveCounterSignature_EncodedInSingleAttribute",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_Empty",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NoEkuExtension",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertHashMismatchV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.MatchV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TimestampTooOld",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_SignedCmsOfData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TwoEkuExtensions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_MalformedToken",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchIssuerAndSerialV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertHashMismatchV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TimestampTooNew",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.MatchV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchIssuerAndSerialV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchV1OrV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMatchV1AndV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_EnvelopedCms",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NonCriticalEkuExtension",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.ParseDocument_ExcessData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NoTsaEku",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.ParseDocument",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingCertWithPrivateKey.DecryptEnvelopedOctetStringWithIndefiniteLength",
                    "reason": "Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unexpected cryptographic message encoding."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTestsUsingCertWithPrivateKey.DecryptEnvelopedEmptyOctetStringWithIndefiniteLength",
                    "reason": "Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unexpected cryptographic message encoding."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_TsaNameOptional",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_IsOrdering_Roundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_HashAlgorithmIdRequired",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.Accuracy_Bounds_ParsesAsExpected",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.NegativeAccuracyThrows",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentOutOfRangeException)\\r\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.ExtensionsRoundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.AccuracyRoundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.CreateFromValue",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_AccuracyOptional",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TryDecode_Invalid",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.CreateFromParameters",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_Timestamp_KeepsSubSeconds",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TryDecode_LongerThanNeeded",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_PolicyIdRequired",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentNullException)\\r\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TsaName_SameDataSecondInvocation",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        }
    },
    {
        "name": "System.Security.Cryptography.Primitives.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.Primitives.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Encryption.Tests.Asymmetric.CryptoStreamTests.Ctor",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Security.Cryptography.ProtectedData.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.X509Certificates.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Cryptography.Xml.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Xml.Tests.EncryptionMethodTests.KeySize_SetNegativeValue_ThrowsArgumentOutOfRangeException",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                }
            ]
        }
    },
    {
        "name": "System.Security.Permissions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.Principal.Windows.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Security.SecureString.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ServiceModel.Syndication.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ServiceProcess.ServiceController.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.SqlClient.ManualTesting.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.SqlClient.Stress.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Data.SqlClient.Tests",
        "enabled": false,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.Encoding.CodePages.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.Encoding.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.Encoding.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.Encoding.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Text.Tests.DecoderFallbackTests.TestDecoderFallbackIndex",
                    "reason": "System.Text.DecoderFallbackException System.Text.DecoderFallbackException : Encountered a negative index during Utf8 decoding fallback "
                }
            ]
        }
    },
    {
        "name": "System.Text.Encodings.Web.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.RegularExpressions.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Text.RegularExpressions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Text.RegularExpressions.Tests.RegexCompilationInfoTests.Name_GetSet",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.RegexCompilationInfoTests.Pattern_GetSet",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.RegexCompilationInfoTests.Namespace_GetSet",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_TryGetValueSuccess",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Boolean System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String, System.Text.RegularExpressions.Group ByRef)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_TryGetValue_NoMatch",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Boolean System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String, System.Text.RegularExpressions.Group ByRef)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_Values",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.Collections.Generic.IEnumerable`1<System.Text.RegularExpressions.Group> System.Text.RegularExpressions.GroupCollection.get_Values()'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_TryGetValue_DoesntExist",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Boolean System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String, System.Text.RegularExpressions.Group ByRef)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_TryGetValue_Number",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Boolean System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String, System.Text.RegularExpressions.Group ByRef)'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_Keys",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.Collections.Generic.IEnumerable`1<System.String> System.Text.RegularExpressions.GroupCollection.get_Keys()'."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.IReadOnlyDictionary_GetEnumerator",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                },
                {
                    "name": "System.Text.RegularExpressions.Tests.GroupCollectionReadOnlyDictionaryTests.GetEnumerator_Invalid",
                    "reason": "System.EntryPointNotFoundException System.EntryPointNotFoundException : Entry point was not found."
                }
            ]
        }
    },
    {
        "name": "System.Threading.AccessControl.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Channels.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Channels.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Overlapped.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tasks.Dataflow.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tasks.Extensions.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tasks.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tasks.Parallel.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tasks.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Threading.Tests.EventWaitHandleTests.OpenExisting_Windows",
                    "reason": "System.ArgumentException System.ArgumentException : The name 'fac694268eb248e9990777825b5aaab9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                },
                {
                    "name": "System.Threading.Tests.EventWaitHandleTests.Ctor_ValidNames",
                    "reason": "System.ArgumentException System.ArgumentException : The name '8503e07c28f04a8e8ce1c4604f6adbb2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                },
                {
                    "name": "System.Threading.Tests.EventWaitHandleTests.OpenExisting_InvalidNames_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Threading.Tests.MutexTests.OpenExisting_InvalidNames",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Threading.Tests.MutexTests.Ctor_ValidName",
                    "reason": "System.ArgumentException System.ArgumentException : The name '998ce9564d1745d8b901082f7ad17183aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                },
                {
                    "name": "System.Threading.Tests.MutexTests.OpenExisting",
                    "reason": "System.ArgumentException System.ArgumentException : The name '9cc4ad4ac10046cdb05f91bf0f81ad13aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                },
                {
                    "name": "System.Threading.Tests.SemaphoreTests.OpenExisting_InvalidNames_Windows",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.AssertExtensions.Throws(System.String, System.String, System.Func`1<System.Object>)'."
                },
                {
                    "name": "System.Threading.Tests.SemaphoreTests.OpenExisting_SameAsOriginal_Windows",
                    "reason": "System.ArgumentException System.ArgumentException : The name '03ded9d0ccd74eefa101daae32e80ef8aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                },
                {
                    "name": "System.Threading.Tests.SemaphoreTests.Ctor_ValidName_Windows",
                    "reason": "System.ArgumentException System.ArgumentException : The name '27095bdc00264a159609fd12b7052b03aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' can be no more than 260 characters in length.\\r\\nParameter name: name"
                }
            ]
        }
    },
    {
        "name": "System.Threading.Thread.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.ThreadPool.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Threading.Timer.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Transactions.Local.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.ValueTuple.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Web.HttpUtility.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.Axes.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.Events.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.Misc.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.Properties.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.SDMSample.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.Streaming.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.TreeManipulation.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.xNodeBuilder.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Linq.xNodeReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Misc.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.CharCheckingReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.CustomReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.FactoryReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.NameTable.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.ReaderSettings.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.RwFactory.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.SubtreeReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.WrappedReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlConvert.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlReader.ReadContentAs.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlReader.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlSystemPathResolver.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlWriter.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.RW.XmlWriterApi.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Schema.Extensions.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlDocument.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlDocument.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlSchema.XmlSchemaValidatorApi.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlSchemaSet.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlSerializer.Performance.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlSerializer.ReflectionOnly.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XmlSerializer.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XPath.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XPath.XDocument.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.XPath.XmlDocument.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Xsl.XslCompiledTransformApi.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    },
    {
        "name": "System.Xml.Xsl.XslTransformApi.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\r\\nExpected: True\\r\\nActual:   False"
                },
                {
                    "name": "System.Xml.Tests.CTransformResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\r\\nExpected: True\\r\\nActual:   False"
                }
            ]
        }
    },
    {
        "name": "XsltCompiler.Tests",
        "enabled": true,
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": null
        }
    }
]